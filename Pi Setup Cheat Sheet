# Install Raspian light and Grafana / Prometheus and node_exporter (no GUI)
# v0.4e	- 9/6/2020
# Allow at least 30 mins to do full install
# You must be connected to the Internet for updates and downloads
# this cheat sheet assumes a basic understanding of Linux.

Download Noobs Lite, unzip the file into a new folder Called Pi
https://downloads.raspberrypi.org/NOOBS_lite_latest

Format your microSD card on your Windows machine as a standard single fat32 partition
and copy all the Pi directory contents onto the new disk

Remove the MicroSD card and insert it into the Pi. Attach a keyboard/mouse/monitor and boot the Pi.

add WiFi networking to your home network at Noobs install so you can download updates 
and easily login at boot after SSH enable.

select Raspian minmal install only - this is key on the Pi Zero to save precious resources.

# after install and reboot login at the console as pi:raspian  ...
% sudo bash
# raspi-config 

- change pi passwd
- set hostname under 'network'
- set locale en_US.UTF-8 - remove all other locales
- set US 101 key PC keyboard with default settings
- set timezone America/Los Angeles
- enable SSH interface under 'Interfacing Options'

exit from raspi-config when done

-- update firmware
# rpi-update

-- update software
# apt-get update
# apt-get upgrade

-- get pip3 for python3 - all scripts must run Python3 not v2
# apt-get install python3-pip

-- reboot with the new settings
# init 6

-- modify Wifi settings if needed ...
# vi /etc/wpa_supplicant/wpa_supplicant.conf

-- restart wifi network if you made changes
# wpa_cli -i wlan0 reconfigure

-- test internet connection is good
# ping inetd.com
 
-- Add user solar - passwd 'solar' use defaults - copy your bash env to /home/solar and root home dirs
# adduser solar

-- set a password for user solar, dont forget it!
# passwd solar

-- enable sudo for user solar with no password - copy the line for user pi
-- and change pi to solar
# vi /etc/sudoers.d/010_pi-nopasswd

-- change login banner
# cat > /etc/motd

Inetd.Com QC server - all activity monitored and logged.

<ctrl-d>

-- create the ramdisk for ephemeral files
# mkdir /ramdisk

# cat >> /etc/fstab
tmpfs /ramdisk tmpfs nodev,nosuid,size=1M 0 0
<ctrl-d>

-- check ramdisk is mounted correctly
# mount -a
# df

now reboot and login remotely with SSH as user solar, check all your changes are working ok

######### Setting up a Grafana server ############
( Check for new version - 7.0.3 used below)
##################################################

-- boot Pi and login as user solar
# cd /home/solar
# sudo bash

-- this package is required by Grafana
# apt-get install -y adduser libfontconfig1

-- choose the latest version of Grafana for your device.

-- get Grafana for Pi Zero hardware (check for updated versions)
# wget https://dl.grafana.com/oss/release/grafana-rpi_7.0.3_armhf.deb
# sudo dpkg -i grafana-rpi_7.0.3_armhf.deb

-- get Grafana for Pi 3/4 hardware (check for updated versions)
# wget https://dl.grafana.com/oss/release/grafana_7.0.3_arm7.deb
# sudo dpkg -i grafana_7.0.3_armhf.deb

-- if you have trouble installing, try this
# apt-get --fix-broken install

-- configure Grafana to start automatically at boot
# /bin/systemctl daemon-reload
# /bin/systemctl enable grafana-server
# /bin/systemctl start grafana-server
# /bin/systemctl status grafana-server

-- Download and install Prometheus and node_exporter

-- Pi Zero hardware
# wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-armv6.tar.gz
# wget https://github.com/prometheus/node_exporter/releases/download/v1.0.0/node_exporter-1.0.0.linux-armv6.tar.gz

-- Pi 3/4 hardware
# wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-armv7.tar.gz
# wget https://github.com/prometheus/node_exporter/releases/download/v1.0.0/node_exporter-1.0.0.linux-armv7.tar.gz

-- unpack the archives
# tar xvzf prometheus-*.gz
# tar xvzf node_exporter-*.gz

-- cd to prometheus folder

-- Optional - Add prometheus to systemctl so it starts automatically at boottime
-- Configure Prometheus
# cat > prometheus.yml
# Global config
global:
  scrape_interval:     10s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  scrape_timeout:      10s  # scrape_timeout is set to the global default (10s).
#
# Test with promtool check config /etc/prometheus/prometheus.yml
# and tail /var/log/messages
#
scrape_configs:
#
# Unix server data
- job_name: 'node'
  static_configs:
   - targets: ['localhost:9100']
<ctrl-d>

-- run prometheus locally to ensure its working as expected...
# ./prometheus

Should end with - msg="Server is ready to receive web requests."
check interface at http://localhost:9090 on your web browser
substitute 'localhost' with the IP address of your Pi
enter 'node_load1' on the webform and press execute to see value and graph collected locally

-- move to the node_exporter foler you just created
# cd ../node_exporter....

-- node exporter is very simple to use, just start it with the following arguments
# ./node_exporter --collector.textfile.directory=/ramdisk

Should end with - msg="Listening on" address=:9100
Check for data at http://localhost:9100/metrics with your web browser
substitute 'localhost' with the IP address of your Pi

-- Now its finally time to test the Grafana interface, bringing it all together!

on a web browser, goto http://<ipaddr>:3000/login 
The login/password is admin:admin 
(skip updating passwd for now, or make it the same as your solar user password)

add the datasource as prometheus - use the URL http://localhost:9090 - 
then press Save&Test
Then .... try
Dashboard->Home
+ Create import

Import example dashboard from
https://grafana.com/grafana/dashboards?orderBy=name&direction=asc
ID: 10242 is a good example of system metrics
Do + -> Import on left of main page and Import ID 10242
Select Prometheus as a data source

Your new dashboard "Node Exporter Full with Node Name" should now be working
Look for it under Dashboards->home or Dashboards->Manage and search for Node.
Star the dasboard for easier access
You can also cut n paste a JSON description from another working panel
look for 'share->export' on top right


-- Now we configure the Pi to restart all the above when it reboots

# chmod +x /etc/rc.local
# systemctl status rc-local.service
-- if problems try - 
# systemctl enable rc-local

-- add our start script to rc.local before the 'exit 0' line
vi /etc/rc.local

(/home/solar/restartSys.sh) &

-- /home/solar/restartSys.sh contains your local collector scripts that dump data into the /ramdisk
-- edit a new script file and add the following lines. 
-- Modify the folder names to match your configuration.

# vi /home/solar/restartSys.sh

#!/bin/bash
#
cd /home/solar/prometheus-2.19.0.linux-armv6
nohup ./prometheus &

cd /home/solar/node_exporter-1.0.0.linux-armv6
nohup ./node_exporter --collector.textfile.directory=/ramdisk &

# End

# Optional
# Add Prometheus and node_exporter to systemctl so they start at boot automatically
# Local collector scripts are added to /home/solar/restartSys.sh

in browser goto Grafana home at localhost:3000 login:admin passwd:admin
Add prometheus data source
Import example dashboard from
https://grafana.com/grafana/dashboards?orderBy=name&direction=asc
ID: 10242 is a good example of system metrics
Do + -> Import on left of main page and Import ID 10242
Select Prometheus as a data source



Now we can start to add our own Solar monitoring metrics and graph them

First reboot machine with 'init 6' and confirm everything still works after a restart.

You can stop here if you just want to get node_exporter working and wait until you have your own data to import.

######################### End ######################
