# Install Raspian light and SolarMon tools(no GUI)
# v0.4d - 22/5/2020
# Allow at least 30 mins to do full install

add WiFi networking at Noobs install so you can login at boot after SSH enable
select Raspian minmal install only

# after install and reboot login pi:raspian  ....
% sudo bash
# raspi-config

- change pi passwd
- set hostname
- set locale en_US.UTF-8 - remove all others
- set US 101 key PC keyboard with default settings
- set timezone America/Los Angeles
- add SSH interface

# update firmware
rpi-update

# update software
apt-get update
apt-get upgrade

# for lsnet alias
apt-get install arp-scan
apt-get install lighttpd - for xtra reports only in /var/www/html/index.html

# get pip3 for python3 - all scripts must run Python3 not v2
apt-get install python3-pip

#### For EPever ####
pip3 install -U pymodbus
pip3 install -U serial

To compile kernel modules...
# apt-get install raspberrypi-kernel-headers

make module in /home/joe/Dev/xr_usb_serial_common-1a/
cp xr_usb_serial_common.ko  /lib/modules/4.19.97+/kernel/drivers/tty/serial/

# remove competing cdc module
cat >> /etc/modprobe.d/blacklist-cdc_acm.conf
blacklist cdc_acm

init 6
#### End ####


# modify Wifi if needed
vi /etc/wpa_supplicant/wpa_supplicant.conf
wpa_cli -i wlan0 reconfigure
ping inetd.com

# Add Joe - use defaults - copy bash env to /home/joe and root home dirs
adduser joe
vi /etc/sudoers.d/010_pi-nopasswd

cat > /etc/motd

Inetd.Com QC server - all activity monitored and logged.

mkdir /ramdisk
cat >> /etc/fstab
tmpfs /ramdisk tmpfs nodev,nosuid,size=1M 0 0

mount -a
df


reboot and login remotely with SSH

# Setting up as a Grafana server
################################

sudo apt-get install -y adduser libfontconfig1
wget https://dl.grafana.com/oss/release/grafana-rpi_7.0.0_armhf.deb
sudo dpkg -i grafana-rpi_7.0.0_armhf.deb
apt-get --fix-broken install

/bin/systemctl daemon-reload
/bin/systemctl enable grafana-server
/bin/systemctl start grafana-server
/bin/systemctl status grafana-server

wget https://github.com/prometheus/prometheus/releases/download/v2.18.0-rc.0/prometheus-2.18.0-rc.0.linux-armv6.tar.gz
wget https://github.com/prometheus/node_exporter/releases/download/v1.0.0-rc.0/node_exporter-1.0.0-rc.0.linux-armv6.tar.gz

tar xvzf prometheus-2.18.0-rc.0.linux-armv6.tar.gz
tar xvzf node_exporter-1.0.0-rc.0.linux-armv6.tar.gz

cd prometheus-2.18.0-rc.0.linux-armv6

# cat > prometheus.yml
# Global config
global:
  scrape_interval:     10s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  scrape_timeout:      10s  # scrape_timeout is set to the global default (10s).
#
# Test with /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml
# and tail /var/log/messages
#
scrape_configs:
#
# Unix server data
- job_name: 'node'
  static_configs:
   - targets: ['localhost:9100']

nohup ./prometheus &

cd ../node_exporter-1.0.0-rc.0.linux-armv6/
nohup ./node_exporter --collector.textfile.directory="/ramdisk" &

echo "joeTest1 44" > /ramdisk/joe_test_1.prom

"joeTest1 metric is now available in Grafana/Prometheus

goto http://192.168.1.16:3000/login admin:admin (skip updating passwd)
add datasource prometheus URL http://localhost:9090 Save&Test
Dashboard->Home
+ Create import
Cut n paste JSON from a working panel - look for 'share->export' on top right

# grafana-cli plugins install grafana-clock-panel
/bin/systemctl restart grafana-server

# Ensure everything restarts after reboot
chmod +x /etc/rc.local
systemctl status rc-local.service
# if problems - systemctl enable rc-local

# add our scripts to rc.local before exit 0
vi /etc/rc.local

# Start Grafana supporting services
domainname inetd.com
cd /home/joe/Dev/Grafana/PiZero/prometheus-2.18.0-rc.0.linux-armv6
nohup ./prometheus &
cd /home/joe/Dev/Grafana/PiZero/node_exporter-1.0.0-rc.0.linux-armv6
nohup ./node_exporter --collector.textfile.directory="/ramdisk" &


# Enable rc.local to start scripts
chmod +x /etc/rc.local

echo "Start the Solar subsystem" >> /tmp/rc_test.txt.$$
(/home/joe/restartSys.sh) &
echo "ending rc.local" >> /tmp/rc_test.txt.$$

####### Fix USB serial interfaces
# Pi4 arch
ln -sf /dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.0:1.0-port0 /dev/usb0
ln -sf /dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.1:1.0-port0 /dev/usb1
ln -sf /dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.2:1.0-port0 /dev/usb2
ln -sf /dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3:1.0-port0 /dev/usb3
ln -sf /dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.4:1.0-port0 /dev/usb4

# Pi Zero arch with 4 port USB hub
#ln -s /dev/serial/by-path/platform-20980000.usb-usb-0:1.1:1.0-port0 /dev/usb1
#ln -s /dev/serial/by-path/platform-20980000.usb-usb-0:1.2:1.0-port0 /dev/usb2
#ln -s /dev/serial/by-path/platform-20980000.usb-usb-0:1.3:1.0-port0 /dev/usb3
#ln -s /dev/serial/by-path/platform-20980000.usb-usb-0:1.4:1.0-port0 /dev/usb4
#ln -s /dev/serial/by-path/platform-20980000.usb-usb-0:1.0:1.0-port0 /dev/usb0
########

# Add Prometheus and node_exporter to systemctl so they start at boot automatically
# Local collector scripts are added to /home/joe/restartSys.sh

in browser goto Grafana home at localhost:3000 login:admin passwd:admin
Add prometheus data source

Import example dashboard from
https://grafana.com/grafana/dashboards?orderBy=name&direction=asc
ID: 10242 is a good example of system metrics
Do + -> Import on left of main page and Import ID 10242
Select Prometheus as a data source

Your new dashboard "Node Exporter Full with Node Name" should now be working

Now we can start to add our own Solar monitoring metrics and graph them

First reboot machine with 'init 6' and confirm everything still works after a restart.

######################### End ######################
# add your local scripts here, use /dev/usb* interfaces  - IMPORTANT!

# cd /home/joe
# ./pmAC2.py &

--or-- use crontab to run a prog at start
# crontab -e
@reboot /home/joe/restartSys.sh

#### For EPever inverter only ####
cat > ~joe/runGetSolarData.tcsh
#!/usr/bin/tcsh
# Check correct kernel mod is installed
insmod xr_usb_serial_common.ko
echo starting Epever serial data collection
while 1
    /home/joe/Dev/EpSolar/epsolar-tracer-0.0.8/getTracerData.py > /ramdisk/solarData.txt.$$
    sleep 1
    date >> /ramdisk/solarData.txt.$$
    mv /ramdisk/solarData.txt.$$ /ramdisk/solarData.txt
    sleep 4
end

cx  ~joe/runGetSolarData.tcsh
